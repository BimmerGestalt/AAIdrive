plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.gladed.androidgitversion' version '0.4.14'
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'org.ajoberstar.grgit'

apply from: 'buildtools/ColoredOutput.gradle'

apply from: 'buildtools/jacoco.gradle'

apply from: 'buildtools/SentryProperties.gradle'

apply from: 'buildtools/checksums.gradle'

apply from: 'buildtools/external.gradle'

apply from: 'buildtools/screenshots.gradle'

apply from: 'buildtools/preprocess_resources.gradle'

def GITHUB_BRANCH = System.env.GITHUB_REF?.replaceFirst("^refs/.*/", "")

def runProguardInDebug = false
def isRunningOnCI = System.getenv("CI") == "true"

android {
    compileSdkVersion 32
    androidGitVersion {
        hideBranches = [ 'main' ]
        // include build number for CI builds, omit for local builds
        // because local dev commonly involves switching between branches
        if (isRunningOnCI) {
            codeFormat = 'MMNNPPBBB'
        } else {
            codeFormat = 'MMNNPPXXX'
        }
    }
    defaultConfig {
        applicationId "me.hufman.androidautoidrive"
        minSdkVersion 23
        targetSdkVersion 32
        versionCode androidGitVersion.code() + 1
        versionName androidGitVersion.name()
//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner 'me.hufman.androidautoidrive.DexOpenerAndroidJUnitRunner'
        archivesBaseName = "androidautoidrive-${androidGitVersion.name()}"
        buildConfigField "long", "COMMIT_TIME", ((grgit != null && !androidGitVersion.name().contains("-dirty")) ? grgit.head().dateTime.toEpochSecond() : 0L) + "L"
        manifestPlaceholders = [
                spotify_api_key: System.env.AndroidAutoIdrive_SpotifyApiKey ? System.env.AndroidAutoIdrive_SpotifyApiKey : AndroidAutoIdrive_SpotifyApiKey,
                appAuthRedirectScheme: applicationId
        ]

        // show the Audio Context option for advanced users
        // Forcing it is only useful for old phones with Android Open Accessory v2 Audio support
        // because the detection logic for AUDIO_SUPPORTS_USB only guesses based on version
        buildConfigField "boolean", "MANUAL_AUDIO_CONTEXT", "false"

        // enable async RHMI data updates
        // big performance improvement, and seemingly doesn't even cause bugs!
        buildConfigField "boolean", "ASYNC_RHMI_APPLICATION", "true"
    }

    signingConfigs {
        release
    }
    if (isRunningOnCI) {
        // configure keystore
        signingConfigs.release.storeFile = file("../keystore.jks")
        signingConfigs.release.storePassword = System.getenv("KEYSTORE_PASSWORD")
        signingConfigs.release.keyAlias = System.getenv("KEYSTORE_ALIAS")
        signingConfigs.release.keyPassword = System.getenv("KEYSTORE_ALIAS_PASSWORD")
    }

    sourceSets {
        main {
            // split resources into not-nested dirs, per https://stackoverflow.com/a/36214314/169035
            res.srcDirs += [
                    "src/main/res",
                    "src/main/res-facets/music_player",
                    "src/main/res-facets/tips",
                    "src/main/res-facets/welcome",
            ]
        }
    }

    buildFeatures {
        dataBinding true
    }
    buildTypes {
        release {
            postprocessing {
                removeUnusedCode true
                obfuscate false
                optimizeCode true
                proguardFile 'proguard-rules.pro'
            }
            signingConfig signingConfigs.release
        }
        debug {
            if (runProguardInDebug || isRunningOnCI) {        // make sure to run tests against minified code in CI, but local dev can be fast
                postprocessing {
                    removeUnusedCode true
                    obfuscate false
                    optimizeCode true
                    proguardFile 'proguard-rules.pro'
                }
            }
            testCoverageEnabled true
            pseudoLocalesEnabled true
        }
    }
    bundle {
        language.enableSplit = false
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
            all {
                testLogging {
                    exceptionFormat = 'full'
                }
            }
        }
    }

    flavorDimensions "map", "analytics", "storefront"

    productFlavors {
        nonalytics {
            dimension "analytics"
        }
        sentry {
            dimension "analytics"
        }
        nomap {
            dimension "map"
        }
        gmap {
            dimension "map"
            // load api keys from ~/.gradle/gradle.properties
            manifestPlaceholders = [spotify_api_key: System.env.AndroidAutoIdrive_SpotifyApiKey ? System.env.AndroidAutoIdrive_SpotifyApiKey : AndroidAutoIdrive_SpotifyApiKey,
                                    gmaps_api_key: System.env.AndroidAutoIdrive_GmapsApiKey ? System.env.AndroidAutoIdrive_GmapsApiKey : AndroidAutoIdrive_GmapsApiKey,
                                    appAuthRedirectScheme: defaultConfig.applicationId]
        }
        mapbox {
            dimension "map"
            buildConfigField 'String', "MapboxAccessToken", '"' + (System.env.AndroidAutoIdrive_MapboxAccessToken ? System.env.AndroidAutoIdrive_MapboxAccessToken : AndroidAutoIdrive_MapboxAccessToken) + '"'
        }
        full {
            dimension "storefront"
        }
        play {
            dimension "storefront"
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    def assertGit = tasks.create(name: "assertGitVersionRelease") { doLast {
        throw new GradleException("Could not load git versionCode for release build, make sure the project is cloned from git")
    }}
    applicationVariants.all { variant ->
        if (!variant.buildType.isDebuggable() && variant.mergedFlavor.versionCode == 1) {
            def assembleTaskName = "assemble${variant.name.capitalize()}"
            tasks[assembleTaskName].dependsOn(assertGit)
        }
    }

    if (!isRunningOnCI) {
        def assertSpotifyKey = tasks.create(name: "assertSpotifyApiKey") { doLast {
            if ((System.env.AndroidAutoIdrive_SpotifyApiKey ? System.env.AndroidAutoIdrive_SpotifyApiKey : AndroidAutoIdrive_SpotifyApiKey) == "invalid") {
                throw new GradleException("Please configure a Spotify API key in your gradle.properties, or set it to \"unset\" to disable the Spotify functionality\nSee https://bimmergestalt.github.io/AAIdrive/developers")
            }
        }}
        preBuild.dependsOn assertSpotifyKey

        def assertGmapKey = tasks.create(name: "assertGmapKey") { doLast {
            if ((System.env.AndroidAutoIdrive_GmapsApiKey ? System.env.AndroidAutoIdrive_GmapsApiKey : AndroidAutoIdrive_GmapsApiKey) == "unset") {
                throw new GradleException("Please configure a Google Maps API key in your gradle.properties\nSee https://bimmergestalt.github.io/AAIdrive/developers")
            }
        }}
        applicationVariants.all { variant ->
            if (variant.name.contains("gmap")) {
                tasks["assemble${variant.name.capitalize()}"].dependsOn assertGmapKey
            }
        }

        def assertMapboxKey = tasks.create(name: "assertMapboxKey") { doLast {
            if ((System.env.AndroidAutoIdrive_MapboxDownloadToken ? System.env.AndroidAutoIdrive_MapboxDownloadToken : AndroidAutoIdrive_MapboxDownloadToken) == "unset") {
                throw new GradleException("Please configure a secret Mapbox download token in your gradle.properties\nSee https://bimmergestalt.github.io/AAIdrive/developers")
            }
            if ((System.env.AndroidAutoIdrive_MapboxAccessToken ? System.env.AndroidAutoIdrive_MapboxAccessToken : AndroidAutoIdrive_MapboxAccessToken) == "unset") {
                throw new GradleException("Please configure a Mapbox access token in your gradle.properties\nSee https://bimmergestalt.github.io/AAIdrive/developers")
            }
        }}
        applicationVariants.all { variant ->
            if (variant.name.contains("mapbox")) {
                tasks["assemble${variant.name.capitalize()}"].dependsOn assertMapboxKey
            }
        }
    }
}

// compile all the debug variants
task compileDebug {
    dependsOn {
        android.applicationVariants.findAll { it.name.endsWith("Debug") }.collect { variant ->
            "compile${variant.name.capitalize()}Sources"
        }
    }
}

// lint all the debug variants
task lintDebug {
    dependsOn {
        android.applicationVariants.findAll { it.name.endsWith("Debug") }.collect { variant ->
            "lint${variant.name.capitalize()}"
        }
    }
}

// unit test all the debug variants
task testDebug {
    dependsOn {
        android.applicationVariants.findAll { it.name.endsWith("Debug") }.collect { variant ->
            "test${variant.name.capitalize()}UnitTest"
        }
    }
}

// like check, but only with debug variants
task checkDebug {
    dependsOn(lintDebug, testDebug)
}

repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle_extensions_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.github.wax911:android-emojify:1.5.3'
    implementation project(path: ':spotify-app-remote')
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "com.google.openlocationcode:openlocationcode:1.0.4"
    implementation "ar.com.hjg:pngj:2.1.0"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$androidx_navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$androidx_navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$androidx_navigation_version"
    implementation 'net.openid:appauth:0.10.0'
    implementation "androidx.browser:browser:1.3.0"
    implementation ('com.adamratzman:spotify-api-kotlin-android:3.8.3') {
        exclude group: 'org.jetbrains.kotlinx', module: 'kotlinx-coroutines-core'
    }
    implementation "com.soywiz.korlibs.korim:korim-android:2.2.0"
    implementation "com.soywiz.korlibs.korio:korio-android:2.2.0"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
//    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:core-ktx:1.4.0'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.mockito:mockito-core:3.4.4"
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    testImplementation 'org.awaitility:awaitility-scala:3.1.5'
    androidTestImplementation "org.mockito:mockito-android:3.4.4"
    androidTestImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    androidTestImplementation 'com.github.tmurakami:dexopener:2.0.5'
    androidTestImplementation 'org.awaitility:awaitility-scala:3.1.5'
    implementation 'io.bimmergestalt:IDriveConnectKit:0.6'
    implementation 'io.bimmergestalt:IDriveConnectKitAndroid:0.2'
    testImplementation 'io.bimmergestalt:IDriveConnectKit:0.6'
    androidTestImplementation 'io.bimmergestalt:IDriveConnectKit:0.6'
    androidTestImplementation 'io.bimmergestalt:IDriveConnectKitAndroid:0.2'
    androidTestImplementation "org.bouncycastle:bcmail-jdk16:1.46"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
    testImplementation "org.powermock:powermock-core:2.0.9"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.9"
    testImplementation "org.powermock:powermock-module-junit4:2.0.9"

    implementation 'com.luckycatlabs:SunriseSunsetCalculator:1.2'
    gmapImplementation 'com.google.android.gms:play-services-maps:18.0.2'
    gmapImplementation 'com.google.android.gms:play-services-location:19.0.1'
    gmapImplementation 'com.google.android.libraries.places:places:2.5.0'
    gmapImplementation 'com.google.maps:google-maps-services:0.1.20'
    mapboxImplementation "com.mapbox.mapboxsdk:mapbox-sdk-services:5.8.0"
    mapboxImplementation 'com.mapbox.maps:android:10.4.0', {
        exclude group: 'com.mapbox.plugin', module: 'maps-attribution'    // can't click the (i) button from the car screen
        exclude group: 'com.mapbox.plugin', module: 'maps-gesture'        // no touch input provided by the car
        exclude group: 'com.mapbox.plugin', module: 'maps-lifecycle'      // doesn't provide a benefit to our Presentation class
        exclude group: 'com.mapbox.plugin', module: 'maps-overlay'        // not helpful in our case
        exclude group: 'com.mapbox.plugin', module: 'maps-viewport'       // we animate the camera manually
    }
    mapboxImplementation 'com.google.android.gms:play-services-location:19.0.1'

    sentryImplementation 'io.sentry:sentry-android:1.7.16'
    sentryImplementation 'org.slf4j:slf4j-nop:1.7.25'
}
