plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.gladed.androidgitversion' version '0.4.9'
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: 'buildtools/ColoredOutput.gradle'

apply from: 'buildtools/jacoco.gradle'

apply from: 'buildtools/SentryProperties.gradle'

apply from: 'buildtools/checksums.gradle'

def TRAVIS_BRANCH = System.env.TRAVIS_PULL_REQUEST == "true" ? System.env.TRAVIS_PULL_REQUEST_BRANCH : System.env.TRAVIS_BRANCH

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "me.hufman.androidautoidrive"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode androidGitVersion.code() + 1
        versionName androidGitVersion.name()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "androidautoidrive-${androidGitVersion.name()}"
        buildConfigField "long", "BUILD_TIME", System.currentTimeMillis() + "L"

        manifestPlaceholders = [
                spotify_api_key: System.env.AndroidAutoIdrive_SpotifyApiKey ? System.env.AndroidAutoIdrive_SpotifyApiKey : AndroidAutoIdrive_SpotifyApiKey,
                appAuthRedirectScheme: applicationId
        ]

        // show the Audio Context option for advanced users
        // Forcing it is only useful for old phones with Android Open Accessory v2 Audio support
        // because the detection logic for AUDIO_SUPPORTS_USB only guesses based on version
        buildConfigField "boolean", "MANUAL_AUDIO_CONTEXT", "false"
    }

    signingConfigs {
        release
    }
    def isRunningOnTravis = System.getenv("CI") == "true"
    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../keystore.jks")
        signingConfigs.release.storePassword = System.getenv("KEYSTORE_PASSWORD")
        signingConfigs.release.keyAlias = System.getenv("KEYSTORE_ALIAS")
        signingConfigs.release.keyPassword = System.getenv("KEYSTORE_ALIAS_PASSWORD")
    }

    buildFeatures {
        dataBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            testCoverageEnabled true
            pseudoLocalesEnabled true
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions "map", "analytics"

    productFlavors {
        nonalytics {
            dimension "analytics"
        }
        sentry {
            dimension "analytics"
        }
        nomap {
            dimension "map"
        }
        gmap {
            dimension "map"
            // load api keys from ~/.gradle/gradle.properties
            manifestPlaceholders = [spotify_api_key: System.env.AndroidAutoIdrive_SpotifyApiKey ? System.env.AndroidAutoIdrive_SpotifyApiKey : AndroidAutoIdrive_SpotifyApiKey,
                                    gmaps_api_key: System.env.AndroidAutoIdrive_GmapsApiKey ? System.env.AndroidAutoIdrive_GmapsApiKey : AndroidAutoIdrive_GmapsApiKey]
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    def assertGit = tasks.create(name: "assertGitVersionRelease") { doLast {
        throw new GradleException("Could not load git versionCode for release build, make sure the project is cloned from git")
    }}
    applicationVariants.all { variant ->
        if (!variant.buildType.isDebuggable() && variant.mergedFlavor.versionCode == 1) {
            def assembleTaskName = "assemble${variant.name.capitalize()}"
            tasks[assembleTaskName].dependsOn(assertGit)
        }
    }
}

// What files to extract from the source APK files
def RHMISources = [
        "BMWClassic": [
                // multimedia (audioplayer) (sourced from a USA apk)
                "com.bmwgroup.connected.bmw.usa/com.bmwgroup.connected.bmw.usa.p7b": "multimedia/rhmi/bmw/multimedia.p7b",
                "com.bmwgroup.connected.bmw.usa/rhmi/multimedia/id5/v2/ui_description.xml": "multimedia/rhmi/ui_description.xml",
                "com.bmwgroup.connected.bmw.usa/rhmi/bmw/images.zip": "multimedia/rhmi/bmw/images.zip",
                "com.bmwgroup.connected.bmw.usa/rhmi/bmw/texts.zip": "multimedia/rhmi/bmw/texts.zip",
                "com.bmwgroup.connected.bmw.usa/rhmi/common/images.zip": "multimedia/rhmi/common/images.zip",
                "com.bmwgroup.connected.bmw.usa/rhmi/common/texts.zip": "multimedia/rhmi/common/texts.zip",
                // multimedia (audioplayer) (sourced from a worldwide apk)
                "com.bmwgroup.connected.bmw/com.bmwgroup.connected.bmw.p7b": "multimedia/rhmi/bmw/multimedia.p7b",
                "com.bmwgroup.connected.bmw/rhmi/multimedia/id5/v2/ui_description.xml": "multimedia/rhmi/ui_description.xml",
                "com.bmwgroup.connected.bmw/rhmi/bmw/images.zip": "multimedia/rhmi/bmw/images.zip",
                "com.bmwgroup.connected.bmw/rhmi/bmw/texts.zip": "multimedia/rhmi/bmw/texts.zip",
                "com.bmwgroup.connected.bmw/rhmi/common/images.zip": "multimedia/rhmi/common/images.zip",
                "com.bmwgroup.connected.bmw/rhmi/common/texts.zip": "multimedia/rhmi/common/texts.zip",
                // news (readout)
                "news/news.p7b": "news/rhmi/bmw/news.p7b",
                "news/rhmi/ui_description.xml": "news/rhmi/ui_description.xml",
                "news/rhmi/bmw/images.zip": "news/rhmi/bmw/images.zip",
                "news/rhmi/common/images.zip": "news/rhmi/common/images.zip",
                "news/rhmi/common/texts.zip": "news/rhmi/common/texts.zip",
        ],
        "BMW": [
                // basecoreOnlineServices (notifications, assistant)
                "basecore/basecore.p7b": "basecoreOnlineServices/rhmi/bmw/basecoreOnlineServices.p7b",
                "basecore/rhmi/onlineservices/id4/v1/ui_description.xml": "basecoreOnlineServices/rhmi/ui_description.xml",
                "basecore/rhmi/bmw/images.zip": "basecoreOnlineServices/rhmi/bmw/images.zip",
                "basecore/rhmi/common/images.zip": "basecoreOnlineServices/rhmi/common/images.zip",
                "basecore/rhmi/common/texts.zip": "basecoreOnlineServices/rhmi/common/texts.zip",

                // Smartthings UI layout
                // SmartThings <= v2.3.1 uses OnlineServices v2, >= v2.3.6 uses v3
                "basecore/rhmi/onlineservices/id5/v2/ui_description.xml": "smartthings/rhmi/ui_description.xml",
                // spotify UI layout, newer versions of Spotify package don't include this file
                "basecore/rhmi/multimedia/id5/v3/ui_description.xml": "spotify/rhmi/ui_description.xml",
        ],
        "MINIClassic": [
                "com.bmwgroup.connected.mini.usa/com.bmwgroup.connected.mini.usa.p7b": "multimedia/rhmi/mini/multimedia.p7b",
                "com.bmwgroup.connected.mini.usa/rhmi/mini/images.zip": "multimedia/rhmi/mini/images.zip",
                "com.bmwgroup.connected.mini.usa/rhmi/mini/texts.zip": "multimedia/rhmi/mini/texts.zip",
                "com.bmwgroup.connected.mini/com.bmwgroup.connected.mini.p7b": "multimedia/rhmi/mini/multimedia.p7b",
                "com.bmwgroup.connected.mini/rhmi/mini/images.zip": "multimedia/rhmi/mini/images.zip",
                "com.bmwgroup.connected.mini/rhmi/mini/texts.zip": "multimedia/rhmi/mini/texts.zip",

                "news/news.p7b": "news/rhmi/mini/news.p7b",
                "news/rhmi/mini/images.zip": "news/rhmi/mini/images.zip",
        ],
        "MINI": [
                "basecore/basecore.p7b": "basecoreOnlineServices/rhmi/mini/basecoreOnlineServices.p7b",
                "basecore/rhmi/mini/images.zip": "basecoreOnlineServices/rhmi/mini/images.zip",
        ],
        "Smartthings": [
                "com.smartthings.android/com.smartthings.android.p7b": "smartthings/smartthings.p7b",
                "com.smartthings.android/rhmi/bmw/images.zip": "smartthings/rhmi/bmw/images.zip",
                "com.smartthings.android/rhmi/bmw/texts.zip": "smartthings/rhmi/bmw/texts.zip",
                "com.smartthings.android/rhmi/common/images.zip": "smartthings/rhmi/common/images.zip",
                "com.smartthings.android/rhmi/common/texts.zip": "smartthings/rhmi/common/texts.zip",
                "com.smartthings.android/rhmi/mini/images.zip": "smartthings/rhmi/mini/images.zip",
                "com.smartthings.android/rhmi/mini/texts.zip": "smartthings/rhmi/mini/texts.zip",
        ],
        "Spotify": [
                "com.spotify.music/com.spotify.music.p7b": "spotify/spotify.p7b",
                "com.spotify.music/rhmi/bmw/images.zip": "spotify/rhmi/bmw/images.zip",
                "com.spotify.music/rhmi/bmw/texts.zip": "spotify/rhmi/bmw/texts.zip",
                "com.spotify.music/rhmi/mini/images.zip": "spotify/rhmi/mini/images.zip",
                "com.spotify.music/rhmi/mini/texts.zip": "spotify/rhmi/mini/texts.zip",
        ],
]

// extract RHMI resources from official apps
task extractRHMI(type: Copy) {
    description "Extracts necessary RHMI resources for compilation"

    def destRoot = "src/main/assets/carapplications"

    def bmwConnectedClassicFound = new FileNameByRegexFinder().getFileNames(file("../external").toString(), /(?i)bmw.*connected.*classic.*\.apk/)

    def bmwConnectedFound = new FileNameByRegexFinder().getFileNames(file("../external").toString(), /(?i)bmw.*connected.*\.apk/)
    bmwConnectedFound.removeAll(bmwConnectedClassicFound)

    def miniConnectedClassicFound = new FileNameByRegexFinder().getFileNames(file("../external").toString(), /(?i)mini.*connected.*classic.*\.apk/)

    def miniConnectedFound = new FileNameByRegexFinder().getFileNames(file("../external").toString(), /(?i)mini.*connected.*\.apk/)
    miniConnectedFound.removeAll(miniConnectedClassicFound)

    def smartthingsFound = new FileNameByRegexFinder().getFileNames(file("../external").toString(), /(?i)smartthings.*classic.*\.apk/)

    def spotifyFound = new FileNameByRegexFinder().getFileNames(file("../external").toString(), /(?i)spotify.*\.apk/)

    def sources = [
            "BMWClassic": bmwConnectedClassicFound[0] ?: new StopExecutionException("Could not locate BMW Connected Classic APK in external directory"),
            "BMW": bmwConnectedFound[0] ?: new StopExecutionException("Could not locate BMW Connected APK in external directory"),
            "MINIClassic": miniConnectedClassicFound[0] ?: new StopExecutionException("Could not locate MINI Connected Classic APK in external directory"),
            "MINI": miniConnectedFound[0] ?: new StopExecutionException("Could not locate MINI Connected APK in external directory"),
            "Smartthings": smartthingsFound[0] ?: new StopExecutionException("Could not locate Smartthings Classic APK in external directory"),
            "Spotify": spotifyFound[0] ?: new StopExecutionException("Could not locate Spotify APK in external directory"),
    ]

    // actually do the copy
    sources.each { sourceZip ->
        // only prepare the CopySpec if a destination file from this zip is missing
        def missing = RHMISources[sourceZip.key].values().findAll {
            !file("$destRoot/$it").exists()
        }
        if (!missing.isEmpty()) {
            if (sourceZip.value instanceof Exception) {
                throw new StopExecutionException("Could not locate source zip for file(s): [${missing.join(",")}]: ${sourceZip.value.message}")
            }
            RHMISources[sourceZip.key].each { sourceFile ->
                from({zipTree(sourceZip.value)}) {
                    include "assets/carapplications/${sourceFile.key}"
                    eachFile { it.relativePath = new RelativePath(true, sourceFile.value)}
                }
            }
            if (inputs.sourceFiles.empty) throw new StopExecutionException("Could not locate RHMI Resources in provided APK: ${sourceZip.value}")
        }
    }
    into destRoot

    // declare the list of expected files, to inform Gradle Caching
    def outputFiles = RHMISources.values().collect({ sourceZip ->
        sourceZip.values()
    }).flatten().collect({
        "$destRoot/$it"
    })
    outputs.files outputFiles

    // make extra sure that the correct files were extracted from the APKs
    doLast {
        def missing = outputFiles.findAll {
            !file(it).exists()
        }
        if (!missing.isEmpty()) {
            throw new Exception("Missing required RHMI files:\n${missing.join("\n")}")
        }
    }
}

// Also the unit tests rely on some files, extract those too
def RHMIClassicSourcesTest = [
        // these files are only in the Classic app
        "news/rhmi/ui_description.xml": "ui_description_news.xml",
]
def RHMISourcesTest = [
        "basecore/rhmi/multimedia/id5/v2/ui_description.xml": "ui_description_multimedia_v2.xml",
        "basecore/rhmi/multimedia/id5/v3/ui_description.xml": "ui_description_multimedia_v3.xml",
        "basecore/rhmi/onlineservices/id5/v1/ui_description.xml": "ui_description_onlineservices_v1.xml",
        "basecore/rhmi/onlineservices/id5/v2/ui_description.xml": "ui_description_onlineservices_v2.xml",
]
task extractRHMITest(type: Copy) {
    description "Extracts necessary RHMI resources for unit tests"

    def destRoot = "src/test/resources"
    def connectedFound = new FileNameByRegexFinder().getFileNames(file("../external").toString(), /(?i)connected.*\.apk/)
    def connectedClassicFound = new FileNameByRegexFinder().getFileNames(file("../external").toString(), /(?i)connected.*\.apk/)
    connectedFound.removeAll {it.toLowerCase().contains("classic")}
    connectedClassicFound.retainAll {it.toLowerCase().contains("classic")}

    def missing = RHMISourcesTest.values().findAll {
        !file("$destRoot/$it").exists()
    }
    if (!missing.isEmpty()) {
        if (connectedFound.isEmpty()) {
            throw new StopExecutionException("Could not locate Connected APK to extract test resources from")
        }
        RHMIClassicSourcesTest.each { sourceFile ->
            from({zipTree(connectedClassicFound[0])}) {
                include "assets/carapplications/${sourceFile.key}"
                eachFile { it.relativePath = new RelativePath(true, sourceFile.value)}
            }
        }
        RHMISourcesTest.each { sourceFile ->
            from({zipTree(connectedFound[0])}) {
                include "assets/carapplications/${sourceFile.key}"
                eachFile { it.relativePath = new RelativePath(true, sourceFile.value)}
            }
        }
        inputs.files(connectedFound[0])
        if (inputs.sourceFiles.empty) throw new StopExecutionException("Could not locate RHMI Test Resources in provided APK")
    }
    into destRoot

    outputs.files RHMISourcesTest.values().collect {
        "$destRoot/$it"
    }

    doLast {
        def afterMissing = RHMISourcesTest.values().findAll {
            !file("$destRoot/$it").exists()
        }
        if (!afterMissing.isEmpty()) {
            throw new Exception("Could not extract test resources:\n${afterMissing.join("\n")}")
        }
    }
}

preBuild.dependsOn extractRHMI
preBuild.dependsOn extractRHMITest

//tasks.matching {it instanceof Test}.all {
//    it.outputs.upToDateWhen {false}
//}

// compile all the debug variants
task compileDebug {
    dependsOn {
        android.applicationVariants.findAll { it.name.endsWith("Debug") }.collect { variant ->
            "compile${variant.name.capitalize()}Sources"
        }
    }
}

// lint all the debug variants
task lintDebug {
    dependsOn {
        android.applicationVariants.findAll { it.name.endsWith("Debug") }.collect { variant ->
            "lint${variant.name.capitalize()}"
        }
    }
}

// unit test all the debug variants
task testDebug {
    dependsOn {
        android.applicationVariants.findAll { it.name.endsWith("Debug") }.collect { variant ->
            "test${variant.name.capitalize()}UnitTest"
        }
    }
}

// like check, but only with debug variants
task checkDebug {
    dependsOn(lintDebug, testDebug)
}

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android:flexbox:2.0.1'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle_extensions_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle_extensions_version"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.github.wax911:android-emojify:1.5.3'
    implementation project(path: ':spotify-app-remote')
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "com.google.openlocationcode:openlocationcode:1.0.4"
    implementation "ar.com.hjg:pngj:2.1.0"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$androidx_navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$androidx_navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$androidx_navigation_version"
    implementation 'net.openid:appauth:0.7.1'
    implementation "androidx.browser:browser:1.3.0"
    implementation 'com.adamratzman:spotify-api-kotlin-android:3.2.14'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.mockito:mockito-core:3.4.4"
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    testImplementation 'org.awaitility:awaitility-scala:3.1.5'
    androidTestImplementation "org.mockito:mockito-android:3.4.4"
    androidTestImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    androidTestImplementation 'org.awaitility:awaitility-scala:3.1.5'
    implementation project(path: ':IDriveConnectKitAndroid')
    implementation project(path: ':IDriveConnectKit')
    testImplementation project(path: ':IDriveConnectKit')
    androidTestImplementation project(path: ':IDriveConnectKitAndroid')
    androidTestImplementation project(path: ':IDriveConnectKit')
    androidTestImplementation "org.bouncycastle:bcmail-jdk16:1.46"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
    testImplementation "org.powermock:powermock-core:2.0.9"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.9"
    testImplementation "org.powermock:powermock-module-junit4:2.0.9"

    implementation 'com.luckycatlabs:SunriseSunsetCalculator:1.2'
    gmapImplementation 'com.google.android.gms:play-services-maps:17.0.0'
    gmapImplementation 'com.google.android.gms:play-services-location:17.1.0'
    gmapImplementation 'com.google.android.libraries.places:places:2.4.0'
    gmapImplementation 'com.google.maps:google-maps-services:0.1.20'

    sentryImplementation 'io.sentry:sentry-android:1.7.16'
    sentryImplementation 'org.slf4j:slf4j-nop:1.7.25'
}
