// Helpfully found at https://veskoiliev.com/how-to-setup-jacoco-for-android-project-with-java-kotlin-and-multiple-flavours/

apply plugin: 'jacoco'
jacoco {
    // required Jacoco version to support Kotlin 1.5
    toolVersion "0.8.11"
}

project.afterEvaluate {
    /**
     * After manually running instrumented tests, this can be used to fetch the coverage file
     */
    task('fetchManualCoverage', type: Exec, group: 'reporting') {
        def phoneSource = "/storage/emulated/0/Android/data/me.hufman.androidautoidrive/coverage.ec"
        def reportsDirectory = "$buildDir/outputs/code_coverage/manual/connected/"

        executable "${android.getAdbExe().toString()}"
        args 'pull', phoneSource, reportsDirectory

        doFirst {
            new File(reportsDirectory).mkdirs()
        }
    }

    task('manualCoverage', type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for any coverage files"

        reports {
            xml.required = true
            xml.outputLocation = file("$buildDir/reports/jacoco/jacoco.xml")   // have this in a common location for coveralls to find
            html.required = true
        }

        def excludes = [
                '**/R.class',
                '**/R$*.class'
        ]
        def kotlinClasses = fileTree(dir: "$buildDir/tmp/kotlin-classes/*", excludes: excludes)
        classDirectories.setFrom(files([kotlinClasses]))

        sourceDirectories.setFrom(files([
                "${project.projectDir}/src/main/java"
        ]))
        executionData.setFrom(fileTree(project.buildDir) {
            include "outputs/code_coverage/*/connected/*ec"
        })
    }

    // enable reporting for compiled classes
//    tasks.withType(Test) {
//        jacoco.includeNoLocationClasses = true
//    }
    // create variant-specific ones
    android.applicationVariants.configureEach { variant ->
        def testTaskName = "test${variant.name.capitalize()}UnitTest"
        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variant.name.capitalize()} build"

            reports {
                xml.required = true
                xml.outputLocation = file("$buildDir/reports/jacoco/jacoco.xml")   // have this in a common location for coveralls to find
                html.required = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class'
            ]
            def kotlinClasses = fileTree(dir: "$buildDir/tmp/kotlin-classes/${variant.name}", excludes: excludes)
            classDirectories.setFrom(files([kotlinClasses]))

            sourceDirectories.setFrom(files([
                    "${project.projectDir}/src/main/java",
                    "${project.projectDir}/src/${variant.name}/java"
            ]))
            executionData.setFrom(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
        }

        def connectedTestTaskName = "connected${variant.name.capitalize()}AndroidTest"
        tasks.create(name: "${connectedTestTaskName}Coverage", type: JacocoReport, dependsOn: "$connectedTestTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variant.name.capitalize()} build"

            reports {
                xml.required = true
                xml.outputLocation = file("$buildDir/reports/jacoco/jacoco.xml")   // have this in a common location for coveralls to find
                html.required = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class'
            ]
            def kotlinClasses = fileTree(dir: "$buildDir/tmp/kotlin-classes/${variant.name}", excludes: excludes)
            classDirectories.setFrom(files([kotlinClasses]))

            sourceDirectories.setFrom(files([
                    "${project.projectDir}/src/main/java",
                    "${project.projectDir}/src/${variant.name}/java"
            ]))
            executionData.setFrom(fileTree(project.buildDir) {
                include "outputs/code_coverage/*/connected/*ec"
            })
        }
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/jacoco.xml'
}
